/**
 * Utils: Mixins
 */

/**
 * breakpoint
 *
 * Iterate through $BREAKPOINTS and generate media queries
 *
 * @param {string} $breakpoint - Key in $BREAKPOINTS map
 */
@mixin breakpoint ($breakpoint) {
    @if map-has-key ($BREAKPOINTS, $breakpoint) {
        $point-data: map-get($BREAKPOINTS, $breakpoint);
        $point-type: #{nth($point-data, 1)}-width;
        $point-width: nth($point-data, 2);
        $point-cols: nth($point-data, 3);
        $point-horizontal-gutter: nth($point-data, 4);
        $point-vertical-gutter: nth($point-data, 5);
        $point-grid-margin: nth($point-data, 6);
        $point-vertical-grid-height: nth($point-data, 7);

        @media (#{$point-type}: #{$point-width / getPropertyFromTypeScale(font-size, html, $CURRENT-BREAKPOINT)}em) {
            $BREAKPOINT-WIDTH: $point-width !global;
            $TOTAL-COLUMNS: $point-cols !global;
            $HORIZONTAL-GUTTER: $point-horizontal-gutter !global;
            $VERTICAL-GUTTER: $point-vertical-gutter !global;
            $CURRENT-BREAKPOINT: $breakpoint !global;
            $GRID-MARGIN: $point-grid-margin !global;
            $VERTICAL-GRID-HEIGHT: $point-vertical-grid-height !global;

            @content;

            $BREAKPOINT-WIDTH: $DEFAULT-BREAKPOINT-WIDTH !global;
            $TOTAL-COLUMNS: $DEFAULT-TOTAL-COLUMNS !global;
            $HORIZONTAL-GUTTER: $DEFAULT-HORIZONTAL-GUTTER !global;
            $VERTICAL-GUTTER: $DEFAULT-VERTICAL-GUTTER !global;
            $CURRENT-BREAKPOINT: $DEFAULT-BREAKPOINT !global;
            $GRID-MARGIN: $DEFAULT-GRID-MARGIN !global;
            $VERTICAL-GRID-HEIGHT: $DEFAULT-VERTICAL-GRID-HEIGHT !global;
        }
    }
};

/**
 * generateFont
 *
 * Generate font-face declaration
 * Assumes you follow the following directory structure:
 *
 * /
 * |- fonts/
 *   |- fontname
 *     |- fontname.eot
 *     |- fontname.woff
 *     |- fontname.ttf
 *     |- fontname.svg
 *
 * @param {string} $fontName - Name of the font to be used when declared
 * @param {string} $fontFileName - Filename of the font
 * @param {int} $fontWeight - Weight of the font (Default: 400)
 *     100 - Thin (Hairline)
 *     200 - Extra Light (Ultra Light)
 *     300 - Light
 *     400 - Normal (Regular)
 *     500 - Medium
 *     600 - Semi Bold (Demi Bold)
 *     700 - Bold
 *     800 - Extra Bold (Ultra Bold)
 *     900 - Black (Heavy)
 * @param {string} $fontStyle - Style of the font (normal, italic, oblique | Default: normal)
 */
@mixin generateFont ($fontName, $fontFileName, $fontWeight: 400, $fontStyle: normal) {
    @font-face {
        font-family: $fontName;
        src: url('/fonts/#{$fontName}/#{$fontFileName}.eot');
        src: url('/fonts/#{$fontName}/#{$fontFileName}.eot?iefix') format('embedded-opentype'),
             url('/fonts/#{$fontName}/#{$fontFileName}.woff') format('woff'),
             url('/fonts/#{$fontName}/#{$fontFileName}.woff2') format('woff2'),
             url('/fonts/#{$fontName}/#{$fontFileName}.svg') format('svg'),
             url('/fonts/#{$fontName}/#{$fontFileName}.ttf') format('truetype');
        font-weight: $fontWeight;
        font-style: $fontStyle;
    }
};

/**
 * setTypeScale
 *
 * @param {string} $type-scale - The style you wish to use from $TYPE-SCALES-MAP
 * @param {number} $context    - The context of the current type-scale
 * @param {string} $breakpoint - The breakpoint in which you wish to get the $style from
 */
@mixin setTypeScale ($type-scale, $context: getPropertyFromTypeScale(font-size, html, $CURRENT-BREAKPOINT), $breakpoint: $CURRENT-BREAKPOINT, $type-scale-map: $TYPE-SCALES-MAP, $breakpoint-map: $BREAKPOINTS-MAP) {

    // $context is string
    @if type-of($context) == string {

        // Set $context as the font-size of $context
        $context: getPropertyFromTypeScale(font-size, $context, $breakpoint, $type-scale-map, $breakpoint-map);
    }

    // $properties holds all the properties of $type-scale
    $properties: getAllPropertiesFromTypeScale($type-scale, $breakpoint, $type-scale-map);

    // Loop through $properties
    @each $property, $value in $properties {

        // $property is font-size
        @if $property == font-size {

            // $type-scale is html
            @if $type-scale == html {

                // Set the font-size property as px
                font-size: #{getPropertyFromTypeScale(font-size, html, $breakpoint, $type-scale-map)}px;
            }

            // $type-scale is not html
            @else {

                // Set the font-size as em
                font-size: #{getPropertyFromTypeScale(font-size, $type-scale, $breakpoint, $type-scale-map) / $context}em;

                // Set $context as the font-size of $type-scale
                $context: getPropertyFromTypeScale(font-size, $type-scale, $breakpoint, $type-scale-map);
            }
        }

        // $property is font-weight
        @else if $property == font-weight {

            // Set the $value of $property
            font-weight: #{$value};
        }

        // $property is not font-size or font-weight
        @else {

            // $value of $property is a number
            @if type-of($value) == number {

                // Set the $value of $property based on the font-size of html
                #{$property}: #{$value / $context}em;
            }

            // $value is not a number
            @else {

                // Set the $value of $property
                #{$property}: #{$value};
            }
        }
    }
};

/**
 * generateTypeScaleStyles
 *
 * @param {map} $type-scale-map - The map you want to generate the typescales from (Default: $TYPE-SCALES-MAP)
 */
@mixin generateTypeScaleStyles ($type-scale-map: $TYPE-SCALES-MAP, $breakpoint-map: $BREAKPOINTS-MAP) {

    // $breakpoint-map is a map
    @if type-of($breakpoint-map) == map {

        // $type-scale-map is a map
        @if type-of($type-scale-map) == map {

            // Loop over each breakpoint in $type-scale-map
            @each $breakpoint in map-keys($type-scale-map) {

                // $breakpoint has type scales
                @if length(map-get($type-scale-map, $breakpoint)) > 0 {

                    // $breakpoint is the first breakpoint in $breakpoint-map
                    @if index(map-keys($breakpoint-map), $breakpoint) == 1 {

                        // Loop over each type scale in $breakpoint
                        @each $type-scale in map-keys(map-get($type-scale-map, $breakpoint)) {

                            // Create the type scale
                            #{$type-scale} {

                                // Set the properties for the type scale
                                @include setTypeScale($type-scale);
                            }
                        }
                    }

                    // $breakpoint is not the first breakpoint in $breakpoint-map
                    @else {

                        // Wrap the type scale in a breakpoint of $breakpoint
                        @include breakpoint ($breakpoint) {

                            // Loop over each type scale in $breakpoint
                            @each $type-scale in map-keys(map-get($type-scale-map, $breakpoint)) {

                                // Create the type scale
                                #{$type-scale} {

                                    // Set the properties for the type scale
                                    @include setTypeScale($type-scale);
                                }
                            }
                        }
                    }
                }
            }
        }

        // $type-scale-map is not a map, throw error
        @else {
            @error ('`$type-scale-map` is not a map');
        }
    }

    // $breakpoint-map is not a map, throw error
    @else {
        @error ('`$breakpoint-map` is not a map');
    }
};

/**
 * generateGridStyles
 *
 * @param {map} $type-scale-map - The map you want to generate the typescales from (Default: $TYPE-SCALES-MAP)
 */
@mixin generateGridStyles ($breakpoint-map: $BREAKPOINTS-MAP) {

    // $breakpoint-map is a map
    @if type-of($breakpoint-map) == map {

        // Default grid styles
        .grid {
            @include grid();
        }

        // Default column styles
        .col {
            @include column();
        }

        // Loop over each breakpoint in $breakpoint-map
        @each $breakpoint in map-keys($breakpoint-map) {

            // If `$breakpoint` is `default`
            @if $breakpoint == 'default' {

                // Loop through all the columns in that breakpoint
                @for $i from 1 through $TOTAL-COLUMNS {

                    // Generate the width class
                    .col.-col-#{$i} {
                        @include column($width: $i);
                    }

                    // Generate the left offset class
                    .col.-col-offset-left-#{$i} {
                        margin-left: percentage($i / $TOTAL-COLUMNS);
                    }

                    // Generate the right offset class
                    .col.-col-offset-right-#{$i} {
                        margin-right: percentage($i / $TOTAL-COLUMNS);
                    }
                }
            }

            // If `$breakpoint` is not `default`
            @else {

                // Wrap in a breakpoint
                @include breakpoint($breakpoint) {

                    // Breakpoint grid styles
                    .grid {
                        @include grid();
                    }

                    // Loop through all the columns in that breakpoint
                    @for $i from 1 through $TOTAL-COLUMNS {

                        // Generate the max width class
                        .grid.-#{$breakpoint}-grid-max-width-#{$i} {
                            max-width: em(($i / $TOTAL-COLUMNS) * $BREAKPOINT-WIDTH);
                        }

                        // Generate the width class
                        .col.-#{$breakpoint}-col-#{$i} {
                            @include column($width: $i);
                        }

                        // Generate the left offset class
                        .col.-#{$breakpoint}-col-offset-left-#{$i} {
                            margin-left: percentage($i / $TOTAL-COLUMNS);
                        }

                        // Generate the right offset class
                        .col.-#{$breakpoint}-col-offset-right-#{$i} {
                            margin-right: percentage($i / $TOTAL-COLUMNS);
                        }
                    }
                }
            }
        }
    }

    // $breakpoint-map is not a map, throw error
    @else {
        @error ('`$breakpoint-map` is not a map');
    }
};

// Clearfix
@mixin clearfix () {
    &:after {
        clear: both;
        content: '';
        display: table;
    }
}

// Vertical align
@mixin verticalAlign () {
    display: flex;
    flex-direction: column;
    height: 100%;
    justify-content: center;
    width: 100%;
}

// Align
@mixin align ($align) {
    @if $align == left {
        margin: auto auto auto 0;
    }

    @else if $align == right {
        margin: auto 0 auto auto;
    }

    @else if $align == center {
        margin: 0 auto 0 auto;
    }

    @else if $align == top {
        margin: 0 auto auto auto;
    }

    @else if $align == bottom {
        margin: auto auto 0 auto;
    }
};

// Gutter for column
@mixin gutter ($horizontal-gutter: null, $vertical-gutter: null) {
    @if $horizontal-gutter != null {
        padding: {
            left: em($horizontal-gutter);
            right: em($horizontal-gutter);
        }
    }

    @else {
        padding: {
            left: 0;
            right: 0;
        }
    }

    @if $vertical-gutter != null {
        padding: {
            top: em($vertical-gutter);
            bottom: em($vertical-gutter);
        }
    }

    @else {
        padding: {
            top: 0;
            bottom: 0;
        }
    }
}

// Grid
@mixin grid ($width: 100%, $align: center, $max-width: null) {
    @include align($align);
    @include clearfix();
    @include gutter($GRID-MARGIN);

    @if $max-width != null {
        max-width: $max-width;
    }

    width: $width;
};

// Column
@mixin column ($width: $TOTAL-COLUMNS, $horizontal-gutter: $HORIZONTAL-GUTTER, $vertical-gutter: $VERTICAL-GUTTER, $context: $TOTAL-COLUMNS) {
    @include gutter($horizontal-gutter, $vertical-gutter);

    float: left;
    width: percentage($width / $context);
};

// Vertical baseline background guide
@mixin verticalBaseline ($height: $VERTICAL-GRID-HEIGHT, $style: 'lines', $colour: rgba(0, 255, 255, 0.3)) {

    // $style is lines
    @if $style == 'lines' {
        background-image: linear-gradient(to bottom, transparent em($height - 1), $colour em(1));
        background-size: 100% em($height);
    }

    // Style is bars
    @else if $style == 'bars' {
        background-image: linear-gradient(to bottom, transparent em($height / 2), $colour em($height / 2));
        background-size: 100% em($height);
    }

    // $style is not lines or bars, throw error
    @else {
        @error ('`$style` of `#{$style}` needs to be either `lines` or `bars`');
    }
}